;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

^c^d hide subtree
^c^s show subtree

- redo parser
 - reentrant string
  - loop when possible
  - need add to func
   - or maybe just add to one at a time when possible
 - val parse tests
  - maybe oj_val.c or oj_parse.c

 - maybe pospone string contraction until read
  - allow \ in string
  - detect invalid escaped sequence early or later?
   - index() on \ then check after it

 - add cleanup

 - convert for numbers
  - also call to get original string
   - change storage to not lose original (use ext when needed)
 - test parser push/pop
 - validation unit test for mixed with error

 - redo structs to include hash of 8 slots
 - APIs for callback or object
  - also callback for multi-json
 - validator with nil callbacks

- make sure follow works

- val funcs
 - get as different types
  - not all succeed so err as arg
  - oj_val_str(ojErr err, ojVal val, char buf, size_t size)
   - return string if correct type and no ext
   - buf is provided then fill it and return pointer to it
   - if too large for buf or larger than str.start then fill what can be filled and error OJ_ERR_OVERFLOW
   - if a num then get the raw or generate raw
    - change mod if converted

- compare
 - :question: for not exactly follow by a number for comment/note
 - :x: for not supported
 - :white_check_mark: for supported or maybe :ok:
 - validate (test for these)
  - structure comma
  - structure close
  - string chars (\t in string)
  - numbers (multiple . e -)
  - display error location?
 - can get complete values as native types (array and object should be iteratable)
 - big numbers
 - long double or maybe precision (80 bit vs 64)
 - save for later (how to do with others?)
 - multiple json in one file (any allowable format)
 - multiple with one json per line
 - small file (under 4G)
 - medium file (over 4G)
 - large file (larger than memory)
- performance (speed and memory use)
 - validate (no checking that values were extracted) (mark as not really validated if compare shows invalid are not detected)
 - single file as string (patient)
 - mutiple file (small)
 - mutiple file (4G)
 - mutiple file (large)
 - build/modify
 - to string
 - write

- TBD stream write functions someday
